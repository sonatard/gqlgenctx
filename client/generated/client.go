// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type GraphQLClient interface {
	Hello(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Hello, error)
	Hello2(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Hello2, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type Hello struct {
	Hello string "json:\"hello\" graphql:\"hello\""
}

func (t *Hello) GetHello() string {
	if t == nil {
		t = &Hello{}
	}
	return t.Hello
}

type Hello2 struct {
	Hello2 string "json:\"hello2\" graphql:\"hello2\""
}

func (t *Hello2) GetHello2() string {
	if t == nil {
		t = &Hello2{}
	}
	return t.Hello2
}

const HelloDocument = `query Hello {
	hello
}
`

func (c *Client) Hello(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Hello, error) {
	vars := map[string]any{}

	var res Hello
	if err := c.Client.Post(ctx, "Hello", HelloDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const Hello2Document = `query Hello2 {
	hello2
}
`

func (c *Client) Hello2(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Hello2, error) {
	vars := map[string]any{}

	var res Hello2
	if err := c.Client.Post(ctx, "Hello2", Hello2Document, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	HelloDocument:  "Hello",
	Hello2Document: "Hello2",
}
