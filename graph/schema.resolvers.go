package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/sonatard/gqlgenctx/client/generated"
	graphgenerated "github.com/sonatard/gqlgenctx/graph/generated"
	"log"
	"net/http"
	"time"
)

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context) (string, error) {
	log.Println("Hello resolver called")

	// gqlgencで生成されたクライアントを初期化 (ポート8081のサーバーに接続)
	log.Println("Initializing GraphQL client for port 8081...")
	client := generated.NewClient(
		http.DefaultClient,
		"http://localhost:8081/query",
		&clientv2.Options{},
	)

	// GraphQLクエリを実行
	log.Println("Sending GraphQL request to port 8081...")
	result, err := client.Hello2(ctx)
	if err != nil {
		log.Println("Failed to send GraphQL request:", err)
		return "", err
	}

	// レスポンスをログに出力
	log.Printf("GraphQL Response from port 8081: %s", result.Hello2)

	return "world", nil
}

// Hello2 is the resolver for the hello2 field.
func (r *queryResolver) Hello2(ctx context.Context) (string, error) {
	log.Println("Hello2 resolver called sleep")
	time.Sleep(5 * time.Second) // 5秒待機
	log.Println("Hello2 resolver called wakeup")
	if ctx.Err() != nil {
		log.Println("context error:", ctx.Err())
		return "", ctx.Err()
	}
	return "hello2", nil
}

// Query returns graphgenerated.QueryResolver implementation.
func (r *Resolver) Query() graphgenerated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
